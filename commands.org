# Commands

This file describes ideas how the labbook works and which commands are available. At the center of the labbook commands is a configuration file defining pipelines and dependencies

- =labbook init project <template>=

  Create a new project from template. Comparable to =git init= with some extras
- =labbook init campaign <name>=

  Creates a new campaign folder and sets metadata, if folder exists subfolders are added to version control
  #+BEGIN_QUOTE
 base name results .gitignore .archive .config 
  #+END_QUOTE
- =labook execute <pipeline> <campaign/case>=
  
  Execute the pipeline for a full campaign or a specific case. There are four different pipeline types:
  1. preprocessing:
      
    Brings a campaign or a case into an executable state.
  2. execution:
  
    Runs a simulation and sets the state to started. If copy flag is set the case is copied to a dedicated folder with the hash of the transforming function, otherwise only a simlink is created.
  3. postprocessing
  
    Extracts results from the cases and sets the state to complete.
    
  4. archive 
    
  A pipeline might be of multiple types
  
- =labook rebase <campaign/case>=

  Sets =campaign/case= as new base case, archives all other cases
  
- =labbook checkout <revision>=

  Go back to revision
  
- =labbook log=
 
  Shows a full log of the current project
  
- =labbook log [done/started/waiting]=
 
  Shows cases which are =completed/started/waiting=
  

  
- =labbook commit -m <message>=

  Commit state to version control. *TODO* Specify when it needed 
  #+BEGIN_QUOTE
  base results .gitignore .archive .config 
  #+END_QUOTE
  
=labbook init campaign parameter_foo=
  
 base  parameter_foo results .gitignore .archive .config 
  
=labbook init new_base [parameter_foo/1] -m "Use parameter 1 for new base case" =
  
 base results .archive/old_base_id

